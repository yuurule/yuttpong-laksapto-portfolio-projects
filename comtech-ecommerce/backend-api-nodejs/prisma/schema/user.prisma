model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  role          Role     @default(EDITOR)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  refreshTokens             RefreshToken[]
  // Product
  createdProducts           Product[] @relation("UserCreatedProduct")
  updatedProducts           Product[] @relation("UserUpdatedProduct")
  deletedProducts           Product[] @relation("UserDeletedProduct") // soft delete
  assignedProductImages     ProductImage[] @relation("UserAssignedProductImage")
  updatedProductImages      ProductImage[] @relation("UserUpdatedProductImage")
  assignedProductSales      OnSalesProduct[] @relation("UserAssignedProductSales")
  updatedProductSales       OnSalesProduct[] @relation("UserUpdatedProductSales")
  // Category
  createdCategories         Category[] @relation("UserCreatedCategory")
  updatedCategories         Category[] @relation("UserUpdatedCategory")
  assignedCategoryProducts  CategoryProduct[]
  // Tag
  createdTags               Tag[] @relation("UserCreatedTag")
  updatedTags               Tag[] @relation("UserUpdatedTag")
  assignedTagProducts       TagProduct[]
  // Brand
  createdBrands             Brand[] @relation("UserCreatedBrand")
  updatedBrands             Brand[] @relation("UserUpdatedBrand")
  deletedBrands             Brand[] @relation("UserDeletedBrand") // soft delete
  // Stock event
  actionedStockEvent        StockEvent[]
  // Campaign
  createdCampaigns          Campaign[] @relation("UserCreatedCampaign")
  updatedCampaigns          Campaign[] @relation("UserUpdatedCampaign")
  deletedCampaigns          Campaign[] @relation("UserDeletedCampaign") // soft delete
  createdCampaignHistories  CampaignHistory[] @relation("UserCreatedCampaignHistory")
  assignedCampaignProducts  CampaignProduct[]

  @@map("users")
}

enum Role {
  ADMIN
  AUTHOR
  EDITOR
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Customer {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  lastActive    DateTime
  onDelete      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  customerRefreshTokens   CustomerRefreshToken[]
  customerDetail          CustomerDetail?
  orders                  Order[]
  cartItems               CartItem[]
  createdReviews          Review[] @relation("CustomerCreatedReview")
  stockSellEvents         StockSellEvent[]

  @@map("customers")
}

model CustomerRefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  customerId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  cutomer      Customer     @relation(fields: [customerId], references: [id])

  @@map("customer_refresh_tokens")
}

model CustomerDetail {
  id            Int @id @default(autoincrement())
  customerId    Int @unique
  firstName     String?
  lastName      String?
  phone         String?
  lineId        String?

  customer      Customer @relation(fields: [customerId], references: [id])
  
  @@map("customer_details")
}