model Product {
  id              Int @id @default(autoincrement())
  sku             String @unique
  name            String
  description     String @db.Text
  price           Decimal @db.Decimal(10, 2) 
  brandId         Int?
  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?
  deletedAt       DateTime?
  deletedById     Int?

  brand           Brand? @relation(fields: [brandId], references: [id], onDelete: SetNull)
  specs           ProductSpecs?
  images          ProductImage[]
  reviews         Review[]
  categories      CategoryProduct[]
  tags            TagProduct[]
  orderItems      OrderItem[]
  onSales         OnSalesProduct?
  cartItems       CartItem[]
  createdBy       User @relation("UserCreatedProduct", fields: [createdById], references: [id])
  updatedBy       User? @relation("UserUpdatedProduct", fields: [updatedById], references: [id])
  deletedBy       User? @relation("UserDeletedProduct", fields: [deletedById], references: [id])

  @@map("products")
}

model ProductSpecs {
  id                Int @id @default(autoincrement())
  productId         Int @unique
  mainboard         String
  mainboardFeature  String @db.Text
  cpu               String
  gpu               String
  ram               Int
  harddisk          String
  soundCard         String
  powerSupply       String
  screenSize        Decimal @db.Decimal(10, 2)
  screenType        String
  refreshRate       Int
  dimension         String
  weight            Decimal @db.Decimal(10, 2)
  freeGift          String // ของแถม

  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specs")
}

model ProductImage {
  id              Int @id @default(autoincrement())
  url_path        String
  productId       Int
  sequence_order  Int
  assignedAt      DateTime @default(now())
  assignedById    Int
  updatedAt       DateTime @updatedAt
  updatedById     Int

  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedBy      User @relation("UserAssignedProductImage", fields: [assignedById], references: [id])
  updatedBy       User? @relation("UserUpdatedProductImage", fields: [updatedById], references: [id])

  @@map("product_images")
}

model OnSalesProduct {
  id              Int @id @default(autoincrement())
  productId       Int @unique
  discountRate    Int // %
  finishDate      DateTime?
  assignedAt      DateTime @default(now())
  assignedById    Int
  updatedAt       DateTime @updatedAt
  updatedById     Int

  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedBy      User @relation("UserAssignedProductSales", fields: [assignedById], references: [id])
  updatedBy       User? @relation("UserUpdatedProductSales", fields: [updatedById], references: [id])

  @@map("on_sales_products")
}
