generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["prismaSchemaFolder"]
  relationMode = "prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  role          Role     @default(EDITOR)
  displayName   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  refreshTokens             RefreshToken[]
  // Product
  createdProducts           Product[] @relation("UserCreatedProduct")
  updatedProducts           Product[] @relation("UserUpdatedProduct")
  deletedProducts           Product[] @relation("UserDeletedProduct") // soft delete
  assignedProductImages     ProductImage[] @relation("UserAssignedProductImage")
  updatedProductImages      ProductImage[] @relation("UserUpdatedProductImage")
  assignedProductSales      OnSalesProduct[] @relation("UserAssignedProductSales")
  updatedProductSales       OnSalesProduct[] @relation("UserUpdatedProductSales")
  // Category
  createdCategories         Category[] @relation("UserCreatedCategory")
  updatedCategories         Category[] @relation("UserUpdatedCategory")
  assignedCategoryProducts  CategoryProduct[]
  // Tag
  createdTags               Tag[] @relation("UserCreatedTag")
  updatedTags               Tag[] @relation("UserUpdatedTag")
  assignedTagProducts       TagProduct[]
  // Brand
  createdBrands             Brand[] @relation("UserCreatedBrand")
  updatedBrands             Brand[] @relation("UserUpdatedBrand")
  deletedBrands             Brand[] @relation("UserDeletedBrand") // soft delete
  // Stock event
  actionedStockEvent        StockEvent[]
  // Campaign
  createdCampaigns          Campaign[] @relation("UserCreatedCampaign")
  updatedCampaigns          Campaign[] @relation("UserUpdatedCampaign")
  deletedCampaigns          Campaign[] @relation("UserDeletedCampaign") // soft delete
  createdCampaignHistories  CampaignHistory[] @relation("UserCreatedCampaignHistory")
  assignedCampaignProducts  CampaignProduct[]

  @@map("users")
}

enum Role {
  ADMIN
  AUTHOR
  EDITOR
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Customer {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  displayName   String    @unique
  lastActive    DateTime
  onDelete      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  customerRefreshTokens   CustomerRefreshToken[]
  customerDetail          CustomerDetail?
  orders                  Order[]
  cartItems               CartItem[]
  createdReviews          Review[] @relation("CustomerCreatedReview")
  stockSellEvents         StockSellEvent[]
  wishlists               Wishlist[]

  @@map("customers")
}

model CustomerRefreshToken {
  id            Int      @id @default(autoincrement())
  token         String   @db.Text
  customerId    Int
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  cutomer      Customer     @relation(fields: [customerId], references: [id])

  @@map("customer_refresh_tokens")
}

model CustomerDetail {
  id            Int @id @default(autoincrement())
  customerId    Int @unique
  firstName     String?
  lastName      String?
  phone         String?
  lineId        String?
  // Address
  address       String? // ที่อยู่
  subDistrict   String? // แขวง
  district      String? // เขต
  province      String? // จังหวัด/เมือง
  postcode      String? // รหัสไปรษณีย์
  country       String? // ประเทศ

  customer      Customer @relation(fields: [customerId], references: [id])
  
  @@map("customer_details")
}

// Product
model Brand {
  id              Int @id @default(autoincrement())
  name            String
  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?
  deletedAt       DateTime?
  deletedById     Int?

  products        Product[]
  createdBy       User @relation("UserCreatedBrand", fields: [createdById], references: [id])
  updatedBy       User? @relation("UserUpdatedBrand", fields: [updatedById], references: [id]) 
  deletedBy       User? @relation("UserDeletedBrand", fields: [deletedById], references: [id])

  @@map("brands")
}

model Product {
  id              Int @id @default(autoincrement())
  sku             String @unique
  name            String
  description     String @db.Text
  price           Decimal @db.Decimal(10, 2) 
  publish         Boolean @default(false)
  brandId         Int?

  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?
  deletedAt       DateTime?
  deletedById     Int?

  inStock         InStock?
  stockEvents     StockEvent[]
  brand           Brand? @relation(fields: [brandId], references: [id], onDelete: SetNull)
  specs           ProductSpecs?
  images          ProductImage[]
  reviews         Review[]
  categories      CategoryProduct[]
  tags            TagProduct[]
  orderItems      OrderItem[]
  onSales         OnSalesProduct?
  cartItems       CartItem[]
  createdBy       User @relation("UserCreatedProduct", fields: [createdById], references: [id])
  updatedBy       User? @relation("UserUpdatedProduct", fields: [updatedById], references: [id])
  deletedBy       User? @relation("UserDeletedProduct", fields: [deletedById], references: [id])
  campaignProducts    CampaignProduct[]
  stockSellEvents     StockSellEvent[]
  wishlists           Wishlist[]

  @@map("products")
}

model ProductSpecs {
  id                Int @id @default(autoincrement())
  productId         Int @unique
  screen_size        String
  processor         String
  display           String
  memory            String
  storage           String
  graphic           String
  operating_system  String
  camera            String
  optical_drive     String
  connection_ports  String
  wireless          String
  battery           String
  color             String
  dimension         String
  weight            String
  warranty          String
  option            String

  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specs")
}

model ProductImage {
  id              Int @id @default(autoincrement())
  path            String
  filename        String
  mimetype        String
  size            Int
  productId       Int
  sequence_order  Int
  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?

  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdBy      User @relation("UserAssignedProductImage", fields: [createdById], references: [id])
  updatedBy       User? @relation("UserUpdatedProductImage", fields: [updatedById], references: [id])

  @@map("product_images")
}

model OnSalesProduct {
  id              Int @id @default(autoincrement())
  productId       Int @unique
  discountRate    Int // %
  finishDate      DateTime?
  assignedAt      DateTime @default(now())
  assignedById    Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?

  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedBy      User @relation("UserAssignedProductSales", fields: [assignedById], references: [id])
  updatedBy       User? @relation("UserUpdatedProductSales", fields: [updatedById], references: [id])

  @@map("on_sales_products")
}

// Category & Tag
model Category {
  id              Int @id @default(autoincrement())
  name            String
  description     String
  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?

  products        CategoryProduct[]
  createdBy       User @relation("UserCreatedCategory", fields: [createdById], references: [id])
  updatedBy       User? @relation("UserUpdatedCategory", fields: [updatedById], references: [id])  

  @@map("categories")
}

model CategoryProduct {
  productId       Int
  categoryId      Int
  assignedAt      DateTime @default(now())
  assignedById    Int

  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assignedBy      User @relation(fields: [assignedById], references: [id])

  @@id([categoryId, productId])
  @@map("categorie_products")
}

model Tag {
  id              Int @id @default(autoincrement())
  name            String
  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?

  products        TagProduct[]
  createdBy       User @relation("UserCreatedTag", fields: [createdById], references: [id])
  updatedBy       User? @relation("UserUpdatedTag", fields: [updatedById], references: [id])

  @@map("tags")
}

model TagProduct {
  tagId           Int
  productId       Int
  assignedAt      DateTime @default(now())
  assignedById    Int

  tag             Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedBy      User @relation(fields: [assignedById], references: [id])

  @@id([tagId, productId])
  @@map("tag_products")
}

// In stock
model InStock {
  id                    Int @id @default(autoincrement()) 
  productId             Int @unique   
  inStock               Int 
  totalSaleQuantity     Int @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  product               Product @relation(fields: [productId], references: [id])

  @@map("in_stocks")
}

model StockEvent {
  id              Int @id @default(autoincrement())
  action          StockAction
  quantity        Int
  productId       Int
  description     String? @db.Text
  actionedById    Int
  actionedAt      DateTime @default(now())

  product         Product @relation(fields: [productId], references: [id])
  actionedBy      User @relation(fields: [actionedById], references: [id])

  @@map("stock_events")
}

model StockSellEvent {
  id              Int @id @default(autoincrement())
  action          StockSellAction
  quantity        Int
  productId       Int
  actionedById    Int
  actionedAt      DateTime @default(now())

  product         Product @relation(fields: [productId], references: [id])
  actionedBy      Customer @relation(fields: [actionedById], references: [id])

  @@map("stock_sell_events")
}

enum StockAction {
  ADD // เพิ่มจำนวนของ
  REMOVE // รองรับกรณีพนักงานลงข้อมูลเกิน, ของสูญหาย เสียหาย, เหตุสุดวิสัยอื่นๆ
}

enum StockSellAction {
  SELL  // จำหน่ายออก
  RESERVE // จองไว้สำหรับ order รอจ่าย
  CANCELRESERVE // ยกเลิกการจองสำหรับ order
}

// Wishlist
model Wishlist {
  id              Int @id @default(autoincrement())
  customerId      Int
  productId       Int
  assignedAt      DateTime @default(now())

  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

// Review 
model Review {
  id              Int @id @default(autoincrement())
  productId       Int
  message         String @db.Text
  rating          Int @default(0)
  approved        Boolean?
  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt

  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdBy       Customer @relation("CustomerCreatedReview", fields: [createdById], references: [id])

  @@map("reviews")
}

// Campaign
model Campaign {
  id              Int @id @default(autoincrement())
  name            String
  description     String
  discount        Decimal @db.Decimal(18, 2)
  isActive        Boolean @default(false)
  startAt         DateTime?
  endAt           DateTime?

  createdAt       DateTime @default(now())
  createdById     Int
  updatedAt       DateTime @updatedAt
  updatedById     Int?
  deletedAt       DateTime?
  deletedById     Int?

  createdBy         User @relation("UserCreatedCampaign", fields: [createdById], references: [id])
  updatedBy         User? @relation("UserUpdatedCampaign", fields: [updatedById], references: [id])
  deletedBy         User? @relation("UserDeletedCampaign", fields: [deletedById], references: [id])

  campaignHistories CampaignHistory[]
  campaignProducts  CampaignProduct[]
  orderItems        OrderItem[]

  @@map("campaigns")
}

model CampaignHistory {
  id              Int @id @default(autoincrement())
  campaignId      Int 
  action          CampaignHistoryAction
  note            String @db.Text
  startAt         DateTime?
  endAt           DateTime?

  createdAt       DateTime @default(now())
  createdById     Int

  createdBy       User @relation("UserCreatedCampaignHistory", fields: [createdById], references: [id])
  campaign        Campaign @relation(fields: [campaignId], references: [id])

  @@map("campaign_histories")
}

enum CampaignHistoryAction {
  CREATE // สร้าง campaign
  UPDATE // แก้ไข campaign
  ACTIVATED // เปิด campaign
  DEACTIVATED // ปิด campaign
  EXPANDTIME // เพิ่มระยะเวลา campaign
  REDUCETIME // ลดระยะเวลา campaign
  MOVETOTRASH // ลบ campaign (แบบ soft delete)
}

model CampaignProduct {
  campaignId      Int
  productId       Int
  assignedAt      DateTime @default(now())
  assignedById    Int

  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  assignedBy      User @relation(fields: [assignedById], references: [id])

  @@id([campaignId, productId])
  @@map("campaign_products")
}

// Cart
model CartItem {
  id            Int @id @default(autoincrement())
  customerId    Int
  productId     Int
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer      Customer @relation(fields: [customerId], references: [id])
  product       Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

// Order
model Order {
  id                Int @id @default(autoincrement())
  orderNumber       String? @unique
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentIntent     String? @unique // Stripe payment intent ID
  customerId        Int
  total             Decimal @db.Decimal(18, 2)
  note              String?
  useSameAddress    Boolean @default(false) // ที่อยุ่จัดส่งใช้ที่อยู่เดียวกันกับที่อยู่ผู้ซื้อ/จ่ายเงิน
  firstName         String?
  lastName          String?
  phone             String?
  address           String? // ที่อยู่
  subDistrict       String? // แขวง
  district          String? // เขต
  province          String? // จังหวัด/เมือง
  postcode          String? // รหัสไปรษณีย์
  country           String? // ประเทศ

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  updatePaymentAt   DateTime?

  customer          Customer @relation(fields: [customerId], references: [id])
  orderItems        OrderItem[]

  @@map("orders") 
}

model OrderItem {
  id                Int  @id @default(autoincrement())
  orderId           Int
  productId         Int
  quantity          Int
  campaignId        Int? // อยู่ในเงื่อนไขลดราคาหรือไม่
  discount          Decimal? @db.Decimal(18, 2) // %
  sale_price        Decimal @db.Decimal(18, 2) // ราคาที่ขายหลังจากคำนวณลดราคาแล้ว ถ้ามี

  product           Product @relation(fields: [productId], references: [id])
  order             Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  campaign          Campaign? @relation(fields: [campaignId], references: [id])
  
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PAID
  CANCEL
  FAILED
  DELIVERING
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCEL
  FAILED
}